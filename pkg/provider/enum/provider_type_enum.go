// Code generated by enum generator; DO NOT EDIT.
package enum

import (
	"fmt"

	"database/sql/driver"
)

// ProviderType is the exported type for the enum
type ProviderType struct {
	name  string
	value int
}

func (e ProviderType) String() string { return e.name }

// MarshalText implements encoding.TextMarshaler
func (e ProviderType) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *ProviderType) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseProviderType(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e ProviderType) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *ProviderType) Scan(value interface{}) error {
	if value == nil {
		*e = ProviderTypeValues()[0]
		return nil
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid providerType value: %v", value)
		}
	}

	val, err := ParseProviderType(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// ParseProviderType converts string to providerType enum value
func ParseProviderType(v string) (ProviderType, error) {

	switch v {
	case "anthropic":
		return ProviderTypeAnthropic, nil
	case "custom":
		return ProviderTypeCustom, nil
	case "google":
		return ProviderTypeGoogle, nil
	case "openai":
		return ProviderTypeOpenAI, nil
	case "unknown":
		return ProviderTypeUnknown, nil

	}

	return ProviderType{}, fmt.Errorf("invalid providerType: %s", v)
}

// MustProviderType is like ParseProviderType but panics if string is invalid
func MustProviderType(v string) ProviderType {
	r, err := ParseProviderType(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for providerType values
var (
	ProviderTypeAnthropic = ProviderType{name: "anthropic", value: 2}
	ProviderTypeCustom    = ProviderType{name: "custom", value: 4}
	ProviderTypeGoogle    = ProviderType{name: "google", value: 3}
	ProviderTypeOpenAI    = ProviderType{name: "openai", value: 1}
	ProviderTypeUnknown   = ProviderType{name: "unknown", value: 0}
)

// ProviderTypeValues returns all possible enum values
func ProviderTypeValues() []ProviderType {
	return []ProviderType{
		ProviderTypeAnthropic,
		ProviderTypeCustom,
		ProviderTypeGoogle,
		ProviderTypeOpenAI,
		ProviderTypeUnknown,
	}
}

// ProviderTypeNames returns all possible enum names
func ProviderTypeNames() []string {
	return []string{
		"anthropic",
		"custom",
		"google",
		"openai",
		"unknown",
	}
}
