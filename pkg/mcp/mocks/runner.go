// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// RunnerMock is a mock implementation of mcp.Runner.
//
//	func TestSomethingThatUsesRunner(t *testing.T) {
//
//		// make and configure a mocked mcp.Runner
//		mockedRunner := &RunnerMock{
//			RunFunc: func(ctx context.Context, prompt string) (string, error) {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedRunner in code that requires mcp.Runner
//		// and then make assertions.
//
//	}
type RunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, prompt string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Prompt is the prompt argument value.
			Prompt string
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *RunnerMock) Run(ctx context.Context, prompt string) (string, error) {
	if mock.RunFunc == nil {
		panic("RunnerMock.RunFunc: method is nil but Runner.Run was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Prompt string
	}{
		Ctx:    ctx,
		Prompt: prompt,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, prompt)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedRunner.RunCalls())
func (mock *RunnerMock) RunCalls() []struct {
	Ctx    context.Context
	Prompt string
} {
	var calls []struct {
		Ctx    context.Context
		Prompt string
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
